# -*- coding: utf-8 -*-
"""beyond-chats.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1Ukmp2pnErJvMKcP99Pl1pH1tLyAcj_0I
"""

!pip install sentence-transformers

import requests
import ipywidgets as widgets
from IPython.display import display
from sentence_transformers import SentenceTransformer
from sklearn.metrics.pairwise import cosine_similarity

def fetch_api_data():
    url = "https://devapi.beyondchats.com/api/get_message_with_sources"
    response = requests.get(url)
    if response.status_code == 200:
        return response.json()["data"]["data"]
    else:
        print("Failed to fetch data from the API.")
        return []

def identify_citations(api_data, response_index, model):
    citations = []
    sources = api_data[response_index]["source"]
    response = api_data[response_index]["response"]
    response_embedding = model.encode(response)  # Encode response text
    for source in sources:
        source_embedding = model.encode(source["context"])  # Encode source context
        similarity = cosine_similarity([response_embedding], [source_embedding])[0][0]  # Calculate cosine similarity
        if similarity > 0.8:  # Adjust threshold as needed
            citations.append(source)
    return citations

def show_citations(change):
    response_index = response_selector.value
    citations = identify_citations(api_data, response_index, model)
    citations_output.clear_output()
    with citations_output:
        if citations:
            print(f"Response {response_index + 1}:")
            for source in citations:
                print(f" - {source}")
        else:
            print(f"No citations found for Response {response_index + 1}")

api_data = fetch_api_data()
model = SentenceTransformer('paraphrase-MiniLM-L6-v2')  # Load pre-trained NLP model

response_selector = widgets.Dropdown(
    options=[(f"Response {i+1}", i) for i in range(len(api_data))],
    description='Select a response:',
    disabled=False,
)

citations_output = widgets.Output()

response_selector.observe(show_citations, names='value')

display(response_selector)
display(citations_output)